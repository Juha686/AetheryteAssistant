---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          env: 
            - name: GF_RENDERING_SERVER_URL
              value: http://grafana-image-renderer:8081/render
            - name: GF_RENDERING_CALLBACK_URL
              value: http://grafana:30008/
            - name: GF_LOG_FILTERS
              value: rendering:debug
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: 'true'
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - port: 30008
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-nodeport
spec:
  ports:
    - port: 3000
      nodePort: 30008
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana-image-renderer
  name: grafana-image-renderer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-image-renderer
  template:
    metadata:
      labels:
        app: grafana-image-renderer
    spec:
      containers:
      - name: grafana-image-renderer
        image: grafana/grafana-image-renderer:latest
        env:
#        - name: HTTP_HOST
#          value: "localhost"
        - name: HTTP_PORT
          value: "8081"
        - name: BROWSER_TZ
          value: "Europe/Berlin"
        - name: IGNORE_HTTPS_ERRORS
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
        - name: LOG_LEVEL
          value: "debug" # error, warning, info
        - name: RENDERING_VERBOSE_LOGGING
          value: "true"
        - name: RENDERING_DUMPIO
          value: "true"
        - name: RENDERING_ARGS
          value: "--no-sandbox,--disable-setuid-sandbox,--disable-dev-shm-usage,--disable-accelerated-2d-canvas,--disable-gpu,--window-size=1280x758"
        - name: RENDERING_MODE
          value: "default"
        ports:
        - name: http
          containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-image-renderer
  labels:
    app: grafana-image-renderer-svc
spec:
  ports:
  - name: http
    port: 8081
    targetPort: 8081
  selector:
    app: grafana-image-renderer
  type: ClusterIP